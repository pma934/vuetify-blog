{
  "body": "<!--{\r\n\"summary\":\"对事件发生顺序、事件绑定、事件委托的一些个人理解\",\r\n\"img\":\"https://img-blog.csdnimg.cn/20190117102631744.png\"\r\n}-->\r\nhtml代码\r\n```\r\n<html>\r\n<head>\r\n    <style>\r\n        div {\r\n            width: 100%;\r\n            height: 100%;\r\n            background-color: rgba(0, 0, 0, 0.055);\r\n        }\r\n    </style>\r\n    <script src=\"http://code.jquery.com/jquery-latest.js\"></script>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"out\">\r\n        <div id=\"mid\">\r\n            <div id=\"inz\">\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <script>\r\n\t\t//…………\r\n    </script>\r\n</body>\r\n</html>\r\n```\r\n\r\n---\r\n一、事件发生顺序\r\n---\r\n事件发生顺序图（图片来源：https://www.cnblogs.com/Chen-XiaoJun/p/6210987.html）\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190117102631744.png)\r\n其中==最里层的冒泡和捕获（即上图5和6）在同一时间节点==，前后顺序根据代码顺序而定。\r\n```\r\n  <script>\r\n        var out = document.getElementById(\"out\")\r\n        var mid = document.querySelector(\"#mid\")\r\n        var inz = document.querySelector(\"#inz\")\r\n\r\n        out.addEventListener('click', function () {\r\n            console.log('冒泡:' + this.id)\r\n        }, false)\r\n        mid.addEventListener('click', function () {\r\n            console.log('冒泡:' + this.id)\r\n        }, false)\r\n        inz.addEventListener('click', function () {\r\n            console.log('冒泡:' + this.id)\r\n        }, false)\r\n\r\n        out.addEventListener('click', function () {\r\n            console.log('捕获:' + this.id)\r\n        }, true)\r\n        mid.addEventListener('click', function () {\r\n            console.log('捕获:' + this.id)\r\n        }, true)\r\n        inz.addEventListener('click', function () {\r\n            console.log('捕获:' + this.id)\r\n        }, true)\r\n\r\n    </script>\r\n```\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190117111634409.png)\r\n\r\n```\r\n <script>\r\n        var out = document.getElementById(\"out\")\r\n        var mid = document.querySelector(\"#mid\")\r\n        var inz = document.querySelector(\"#inz\")\r\n\r\n        out.addEventListener('click', function () {\r\n            console.log('捕获:' + this.id)\r\n        }, true)\r\n        mid.addEventListener('click', function () {\r\n            console.log('捕获:' + this.id)\r\n        }, true)\r\n        inz.addEventListener('click', function () {\r\n            console.log('捕获:' + this.id)\r\n        }, true)\r\n\r\n        out.addEventListener('click', function () {\r\n            console.log('冒泡:' + this.id)\r\n        }, false)\r\n        mid.addEventListener('click', function () {\r\n            console.log('冒泡:' + this.id)\r\n        }, false)\r\n        inz.addEventListener('click', function () {\r\n            console.log('冒泡:' + this.id)\r\n        }, false)\r\n    </script>\r\n```\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019011711193576.png)\r\n事件冒泡、事件捕获和事件委托详细内容可参考该网页：https://www.cnblogs.com/Chen-XiaoJun/p/6210987.html\r\n\r\n---\r\n二、jquery绑定事件\r\n---\r\njquery常用绑定事件方法有`.on()` `.bind()` `.one()`\r\n`.one()` 使用one绑定的事件只会触发一次。\r\n`.bind()` 截至jQuery 3.0，.bind()已被弃用。它被.on()自jQuery 1.7以来将事件处理程序附加到文档的方法所取代，因此不鼓励使用它。\r\n`.on()` 可以通过第二个参数绑定子控件实现事件委托,如\r\n\r\n```\r\n $(\"#mid\").on('click',\"#inz\",function () {\r\n            console.log(\"jquery on:\" + this.id)\r\n        })\r\n```\r\n\r\n`on()` `.bind()` `.one()`都是可以通过事件名称绑定事件。\r\n事件名包括`click`绑定单击、`dblclick`绑定双击、`mousemove`绑定鼠标移动等。\r\njquery还有`.click(f)`、`.dblclick(f)`、`.mousemove(f)`等方法，相当于`.on('click',f)`、`.on('dblclick',f)`、`.on('mousemove',f)`的简写\r\n\r\njQuery 事件方法：http://www.runoob.com/jquery/jquery-ref-events.html\r\n\r\njquery的`on()`  `bind()`  `click()` `one()`等方法绑定的事件，都是在事件冒泡阶段触发。\r\n\r\n```\r\n<script>\r\n        var out = document.getElementById(\"out\")\r\n        var mid = document.querySelector(\"#mid\")\r\n        var inz = document.querySelector(\"#inz\")\r\n\r\n        $(\"#mid\").on('click',function(){\r\n            console.log('on:' + this.id)\r\n        })\r\n\r\n        $(\"#mid\").bind('click',function(){\r\n            console.log('bind:' + this.id)\r\n        })\r\n\r\n        $(\"#mid\").one('click',function(){\r\n            console.log('one:' + this.id)\r\n        })\r\n\r\n        $(\"#mid\").click(function(){\r\n            console.log('click:' + this.id)\r\n        })\r\n \r\n        mid.addEventListener('click', function () {\r\n            console.log('冒泡:' + this.id)\r\n        }, false)\r\n        inz.addEventListener('click', function () {\r\n            console.log('冒泡:' + this.id)\r\n        }, false)\r\n    </script>\r\n```\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019011711235667.png)\r\n\r\n---\r\n三、jquery事件委托\r\n---\r\n**用on()的参数绑定选择器虽然可以给子控件绑定事件，但是事件还是在冒泡到的父控件时才执行（即将绑定到子控件的事件委托给父控件执行）；==同时，该事件先于该父控件用jquery绑定的其他事件==**\r\n1.当inz的冒泡事件阻止事件传输后，通过==事件委托==绑定到inz上的事件未触发。这是因为用$(\"#mid\").on('click','#inz',f)虽然把事件绑定到了inz上，但是==事件的执行却被委托给了父控件mid==\r\n```\r\n <script>\r\n        var out = document.getElementById(\"out\")\r\n        var mid = document.querySelector(\"#mid\")\r\n        var inz = document.querySelector(\"#inz\")\r\n\r\n        $(\"#mid\").on('click',function(){\r\n            console.log('on:' + this.id)\r\n        })\r\n\r\n        $(\"#mid\").on('click','#inz',function(){\r\n            console.log('on:' + this.id)\r\n        })\r\n \r\n        mid.addEventListener('click', function () {\r\n            console.log('冒泡:' + this.id)\r\n        }, false)\r\n        inz.addEventListener('click', function (e) {\r\n            console.log('冒泡:' + this.id)\r\n            e.stopPropagation()\r\n        }, false)\r\n    </script>\r\n```\r\n![](https://img-blog.csdnimg.cn/2019011711285534.png)\r\n2.==委托事件==先于自身绑定事件（通过jquery绑定的）。\r\n```\r\n <script>\r\n        var out = document.getElementById(\"out\")\r\n        var mid = document.querySelector(\"#mid\")\r\n        var inz = document.querySelector(\"#inz\")\r\n\r\n        $(\"#mid\").on('click',function(){\r\n            console.log('on:' + this.id)\r\n        })\r\n\r\n        $(\"#mid\").on('click','#inz',function(){\r\n            console.log('on:' + this.id)\r\n        })\r\n \r\n        mid.addEventListener('click', function () {\r\n            console.log('冒泡:' + this.id)\r\n        }, false)\r\n        inz.addEventListener('click', function () {\r\n            console.log('冒泡:' + this.id)\r\n        }, false)\r\n    </script>\r\n```\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190117112804284.png)\r\n\r\n```\r\n <script>\r\n        var out = document.getElementById(\"out\")\r\n        var mid = document.querySelector(\"#mid\")\r\n        var inz = document.querySelector(\"#inz\")\r\n \r\n        mid.addEventListener('click', function () {\r\n            console.log('冒泡:' + this.id)\r\n        }, false)\r\n        inz.addEventListener('click', function () {\r\n            console.log('冒泡:' + this.id)\r\n        }, false)\r\n\r\n        $(\"#mid\").on('click',function(){\r\n            console.log('on:' + this.id)\r\n        })\r\n\r\n        $(\"#mid\").on('click','#inz',function(){\r\n            console.log('on:' + this.id)\r\n        })\r\n    </script>\r\n```\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190117113023248.png)\r\n jquery委托事件中的 `this.id`,先于jquery绑定事件中的`this.id`输出，但是通过`addEventListener`绑定的事件还是由编写顺序觉定\r\n\r\n--- \r\n四、在绑定事件中调用函数\r\n---\r\n\r\n1.this指向\r\n2.call、apply参数区别\r\n\r\n给DOM绑定事件时，事件函数的this是指向该DOM的，但是在事件函数中再调用其他函数，这时其他函数的this是指向window的。要想其他函数的this也指向DOM，可以使用`call()`、`apply()`\r\n我顺便用这个例子记一下`call()`、`apply()`参数的区别\r\n```\r\n<script>\r\n        var out = document.getElementById(\"out\")\r\n        var mid = document.querySelector(\"#mid\")\r\n        var inz = document.querySelector(\"#inz\")\r\n\r\n        mid.addEventListener('click', function () {\r\n            ttt.call(this, '冒', '泡')\r\n            ttt.apply(this, ['冒', '泡'])\r\n            ttt('冒', '泡')\r\n        }, false)\r\n\r\n        function ttt(x, y) {\r\n            console.log(x + y + ':' + this)\r\n        }\r\n </script>\r\n```\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190117100843405.png)\r\n\r\n<!--{\r\n\"summary\":\"先来测试一下效果，看看列表里的简介和img能正常显示不，再看看文章的markdown解析效果\",\r\n\"img\":\"https://octodex.github.com/images/yaktocat.png\"\r\n}-->\r\n# Markdown语法示例\r\n\r\n### 字体大小\r\n```\r\n# This is an <h1> tag\r\n## This is an <h2> tag\r\n### This is an <h3> tag\r\n#### This is an <h4> tag\r\n##### This is an <h5> tag\r\n###### This is an <h6> tag\r\n```\r\n# This is an h1 tag\r\n## This is an h2 tag\r\n### This is an h3 tag\r\n#### This is an h4 tag\r\n##### This is an h5 tag\r\n###### This is an h6 tag\r\n---\r\n### 突出重点\r\n```\r\n*这是斜体*\r\n_这是斜体_\r\n**这是黑体**\r\n__这是黑体__\r\n*斜体里加**黑体***\r\n**黑体里加*斜体***\r\n```\r\n*这是斜体*\r\n_这是斜体_\r\n**这是黑体**\r\n__这是黑体__\r\n*斜体里加**黑体***\r\n**黑体里加*斜体***\r\n\r\n---\r\n### 清单\r\n#### 无序\r\n```\r\n* Item 1\r\n* Item 2\r\n  * Item 2a\r\n  * Item 2b\r\n```\r\n* Item 1\r\n* Item 2\r\n  * Item 2a\r\n  * Item 2b\r\n#### 有序\r\n```\r\n1. Item 1\r\n1. Item 2\r\n1. Item 3\r\n   1. Item 3a\r\n   1. Item 3b\r\n```\r\n1. Item 1\r\n1. Item 2\r\n1. Item 3\r\n   1. Item 3a\r\n   1. Item 3b\r\n#### 待办\r\n```\r\n - [ ] List item\r\n```\r\n- [ ] List item\r\n---\r\n### 图片\r\n`![Yaktocat的图片](https://octodex.github.com/images/yaktocat.png)`\r\n![Yaktocat的图片](https://octodex.github.com/images/yaktocat.png)\r\n\r\n---\r\n### 链接\r\n```\r\nhttp://github.com - automatic!\r\n[GitHub](http://github.com)\r\n```\r\nhttp://github.com - automatic!\r\n[GitHub](http://github.com)\r\n\r\n---\r\n### 引用文字\r\n```\r\nAs Kanye West said:\r\n> We're living the future so\r\n> the present is our past.\r\n```\r\nAs Kanye West said:\r\n> We're living the future so\r\n> the present is our past.\r\n\r\n---\r\n### 内联代码\r\n```\r\nI think you should use an\r\n`<addr>` element here instead.\r\n```\r\nI think you should use an\r\n`<addr>` element here instead.\r\n\r\n---\r\n### 表格\r\n```\r\nFirst Header | Second Header\r\n------------ | -------------\r\nContent from cell 1 | Content from cell 2\r\nContent in the first column | Content in the second column\r\n```\r\nFirst Header | Second Header\r\n------------ | -------------\r\nContent from cell 1 | Content from cell 2\r\nContent in the first column | Content in the second column\r\n\r\n---\r\n### 删除线\r\n```\r\n~~this~~\r\n```\r\n~~this~~\r\n\r\n---\r\n### 表情符号\r\n```\r\n😝🌟🐫✨🚶 \r\n:sparkles: :camel: :boom:\r\n```\r\n😝🌟🐫✨🚶 \r\n:sparkles: :camel: :boom:\r\n\r\n---\r\n### 高亮\r\n\r\n```\r\n==高亮==\r\n```\r\n==高亮==\r\n<!--{\r\n\"summary\":\"为了解决vue在开发环境和生产环境下需要使用不同的值的问题\",\r\n\"img\":\"https://img-blog.csdnimg.cn/20190205135418620.png\"\r\n}-->\r\n最近在github上搭个人主页，因为要使用github的api，必须用到owner和repo的值。\r\n```\r\nhttps://api.github.com/repos/:owner/:repo/issues\r\n```\r\n在开发环境下，可以自己赋值；在生产环境下，我则希望直接通过window.location.pathname获得。\r\n\r\n---\r\n在创建vue-cli时会自动配置环境变量，生产环境是==production==，开发环境是==development==\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190205135418620.png)\r\n然后在.js和.vue中都可以通过==process.env.NODE_ENV==获得环境变量的值。\r\n因此如果要设置一个在不同环境下不同的变量，可以通过==process.env.NODE_ENV==作为key值。\r\n比如：\r\n\r\n```\r\n<script>\r\n  export default {\r\n    name: '',\r\n    data() {\r\n      return {\r\n        repo: {\r\n          \"development\": \"pma934.github.io\",\r\n          \"production\": window.location.pathname,\r\n        }\r\n      }\r\n    },\r\n    methods: {\r\n      xxx: function () {\r\n        console.log(this.repo[process.env.NODE_ENV])\r\n      }\r\n    }\r\n  }\r\n</script>\r\n```\r\n"
}